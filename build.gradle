plugins {
    id "dev.architectury.loom" version "0.12.0-SNAPSHOT"
    id 'maven-publish'
    id "me.shedaniel.unified-publishing" version "0.1.+"
}

loom {
    silentMojangMappingsLicense()
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = "${project.archive_base_name}"
version = project.mod_version
group = project.maven_group



repositories {
    maven { url 'https://jitpack.io' }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.mappings_version}@zip")
    }
    forge "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"
    modImplementation("com.github.Trinsdar.NetworkApi:networkapi-forge:bf5f6e0175")
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}


tasks.withType(JavaCompile).configureEach {
    it.options.release = 17
}

java {
    withSourcesJar()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

jar {
    from("LICENSE") {
        rename { "${it}_${base.archivesName.get()}"}
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
        }
    }

    repositories {
        maven {
            def mavenUrl = project.hasProperty('maven_url') ? project.property('maven_url') : ""
            url mavenUrl
            if (mavenUrl.startsWith("http")) {
                credentials {
                    username project.hasProperty('maven_username') ? project.property('maven_username') : ""
                    password project.hasProperty('maven_password') ? project.property('maven_password') : ""
                }
            }
        }
    }
}
