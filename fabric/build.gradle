plugins {
    id "fabric-loom" version "1.6.+"
}

archivesBaseName = "${rootProject.archive_base_name}-fabric"

def accessWidenerFile = project(":common").file("src/main/resources/structurelib.accesswidener")
sourceSets {
    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    accessWidenerPath = accessWidenerFile
    runs {
        testClient {
            client()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Client"
            source sourceSets.test
        }
        testServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Server"
            source sourceSets.test
        }
    }
}

repositories {
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven {
        url "https://cursemaven.com"
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${rootProject.minecraft_version}"
    mappings loom.layered() {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${rootProject.minecraft_version}:${rootProject.mappings_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}+${rootProject.minecraft_version}"

    include("io.github.fabricators_of_create:Porting-Lib:${rootProject.port_lib_version}-beta+1.18.2-stable"){ transitive(false) }
    modImplementation("io.github.fabricators_of_create:Porting-Lib:${rootProject.port_lib_version}-beta+1.18.2-stable"){
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "com.github.LlamaLad7")
    }
    modImplementation "maven.modrinth:carbon-config:${project.carbon_config_fabric_version}"
    modImplementation(include("com.teamresourceful.resourcefullib:resourcefullib-fabric-${project.minecraft_version}:${project.resourcefullib_version}"))
}

processResources {
    from project(":common").sourceSets.main.resources
    inputs.property "version", project.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": project.mod_version
    }
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

sourcesJar {
    from(project(':common').sourceSets.main.allSource)
}
