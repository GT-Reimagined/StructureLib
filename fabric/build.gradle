architectury {
    platformSetupLoomIde()
    fabric()
}

archivesBaseName = "${rootProject.archive_base_name}-fabric"
version = "${project.mod_version}-${rootProject.minecraft_version}"

sourceSets {
    test {
        compileClasspath += main.compileClasspath
        runtimeClasspath += main.runtimeClasspath
    }
}

loom {
    silentMojangMappingsLicense()
    runs {
        testClient {
            client()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Client"
            source sourceSets.test
        }
        testServer {
            server()
            ideConfigGenerated project.rootProject == project
            name = "Testmod Server"
            source sourceSets.test
        }
    }
}

repositories {
    maven { url = "https://mvn.devos.one/snapshots/" }
    maven {
        url "https://cursemaven.com"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}+${rootProject.minecraft_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
    include("io.github.fabricators_of_create.Porting-Lib:base:${rootProject.port_lib_version}+1.19.2"){ transitive(false) }
    modImplementation("io.github.fabricators_of_create.Porting-Lib:base:${rootProject.port_lib_version}+1.19.2"){
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "com.github.LlamaLad7")
    }
    implementation("com.github.LlamaLad7:MixinExtras:0.1.1")
    annotationProcessor("com.github.LlamaLad7:MixinExtras:0.1.1")
    implementation("com.electronwill.night-config:toml:${rootProject.nightconfig_version}")
    implementation("com.electronwill.night-config:core:${rootProject.nightconfig_version}")
    modImplementation(include("net.minecraftforge:forgeconfigapiport-fabric:4.2.11"))
    modImplementation(include("com.teamresourceful.resourcefullib:resourcefullib-fabric-${project.minecraft_version}:${project.resourcefullib_version}"))
}

processResources {
    inputs.property "version", project.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": project.mod_version
    }
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}
